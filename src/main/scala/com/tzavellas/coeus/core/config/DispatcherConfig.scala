/* - Coeus web framework -------------------------
 *
 * Licensed under the Apache License, Version 2.0.
 *
 * Author: Spiros Tzavellas
 */
package com.tzavellas.coeus.core
package config

import java.util.Locale
import java.lang.reflect.Method
import javax.servlet.ServletConfig
import com.tzavellas.coeus.Stage
import com.tzavellas.coeus.bind.ConverterRegistry
import com.tzavellas.coeus.http.multipart.{ MultipartRequestParser, NullMultipartRequestParser }
import com.tzavellas.coeus.i18n.locale.{ LocaleResolver, AcceptHeaderLocaleResolver }
import com.tzavellas.coeus.i18n.msg.{ MessageBundle, ServletMessageBundle }
import com.tzavellas.coeus.mvc.view.ViewResolver
import com.tzavellas.coeus.mvc.view.scalate.ScalateViewResolver

import error.ExceptionHandler


/**
 * Holds the configuration for <code>DispatcherServlet</code>.
 * 
 * @see {@link com.tzavellas.coeus.core.DispatcherServlet DispatcherServlet}
 */
trait DispatcherConfig {

  /** The {@code ServletConfig} of the {@code DispatcherServlet}. */
  val servletConfig: ServletConfig
  
  /** The name of the {@code DispatcherServlet}. */
  def servletName = servletConfig.getServletName
  
  /** The {@code ServletContext} of the web application. */
  def servletContext = servletConfig.getServletContext
  
  /**
   * Get the deployment stage of the web application ("production" or "development").
   * 
   * @see Stage#of(ServletContext)
   */
  def stage = Stage.of(servletContext)
  
  /**
   * Translates the controller's class into a base path.
   * 
   * <p>By default the first character of the cotroller's simple class name is transformed
   * into lower-case and the "Controller" suffix (if present) is removed. For example a
   * controller class with the name <code>UserRegistrationController</code> gets translated
   * to "/userRegistration".</p>
   * 
   * <p>The base path that is generated by convention from the class name can be overridden
   * by annotating the controller class with the {@literal @Path} annotation.</p> 
   * 
   * @see ControllerConventions
   * @see {@link com.tzavellas.coeus.annotation.Path Path}
   */
  var classNameTranslator: Class[_] => String = ControllerConventions.useClassName()
  
  /**
   * Translates the controller's annotated methods into paths.
   * 
   * <p>By default the handler method is used without any transformation. For example a handler
   * method with the name <code>submitForm</code> gets translated to "/submitForm".</p>
   * 
   * <p>The paths that are generated by convention from the method names of a controller
   * can be overridden using the HTTP method annotations of those methods.</p> 
   * 
   * @see ControllerConventions
   */
  var methodNameTranslator: Method => String = ControllerConventions.useMethodName
  
  /**
   * Finds the appropriate handler for a given request.
   */
  var requestResolver: RequestResolver = new TreeBasedRequestResolver
  
  /**
   * Called when an exception occurs during the request processing.
   * 
   * <p>By default the exception gets propagated to the Servlet container.</p>
   */
  var exceptionHandler: ExceptionHandler = ExceptionHandler.defaultHandler(servletName)
  
  /**
   * Tells the <code>DispatcherServlet</code> to set the encoding of the Servlet
   * requests to the specified value.
   * 
   * <p>If {@code requestEncoding} is {@code null} then the {@code DispatcherServlet}
   * does not set the encoding of the request.</p>
   * 
   * <p>The default value is {@code "UTF-8"}.</p>
   */ 
  var requestEncoding: String = "UTF-8"
  
  /**
   * Tells the <code>DispatcherServlet</code> to set the HTTP method to the value
   * of the <em>_method</em> request parameter.
   * 
   * <p>This is useful for implementing RESTful applications.</p>
   * 
   * <p>The default value is {@code false}.</p>
   * 
   */
  var overrideHttpMethod: Boolean = false

  /**
   * Respond to HTTP HEAD for URLs that support HTTP GET.
   * 
   * <p>The default value is {@code false}.</p>
   */
  var allowHttpHead: Boolean = false

  /**
   * Respond to HTTP OPTIONS for all URLs.
   * 
   * <p>The default value is {@code false}.</p>
   */
  var allowHttpOptions: Boolean = false

  /**
   * Tells the {@code DispatcherServlet} to send <em>404</em> (Not Found) instead
   * of <em>405</em> (Method Not Allowed) when a resource exist but does not support
   * the requested method.
   * 
   * <p>This is useful when (for security reasons) we would like to hide the
   * existence of a resource.</p>
   * 
   * <p>The default value is {@code false}.</p>
   */
  var hideResources: Boolean = false
  
  /**
   * Resolves the user's locale for a given request.
   * 
   * <p>By default the user's locale is the locale specified in the <em>accept-language</em>
   * header of the HTTP request.</p>
   * 
   * @see LocaleResolver
   * @see AcceptHeaderLocaleResolver
   * @see Locale
   */
  var localeResolver: LocaleResolver = new AcceptHeaderLocaleResolver
  
  /**
   * Loads the i18n messages.
   * 
   * <p>By default the messages are loaded from property files that are located under the
   * "WEB-INF" directory and are cached for one second.</p>
   * 
   * <p>The message files follow similar naming patterns with the files used in
   * {@link java.util.PropertyResourceBundle PropertyResourceBundle} using the base-name
   * "messages". For example if the user's locale is en_US then the <code>MessageBundle</code>
   * will use the files "WEB-INF/messages_en_US.properties" and "WEB-INF/messages_en.properties"
   * to load the messages.</p>
   * 
   * @see ServletMessageBundle
   * @see {@link com.tzavellas.coeus.i18n.msg.ClasspathMessageBundle ClasspathMessageBundle}
   * @see {@link java.util.ResourceBundle ResourceBundle}
   */
  var messageBundle: MessageBundle = new ServletMessageBundle(servletContext, 1000)
  
  /**
   * A collection with pre-configured converters to be used by default when binding
   * and formatting values. 
   * 
   * @see ConverterRegistry
   * @see ConverterRegistry#defaultConverters 
   * @see {@link com.tzavellas.coeus.WebRequest WebRequest}
   */
  var converters: ConverterRegistry = ConverterRegistry.defaultConverters 
  
  /**
   * Parses multipart requests (used in file uploads).
   * 
   * <p>The configured parser does not parse requests and throws {@code UnsupportedOperationException}.
   * This is done in order to avoid having a dependency to an external library by default. If your application
   * handles multipart requests you must use another parser (such as {@code CommonsMultipartRequestParser}).</p>
   */
  var multipartParser: MultipartRequestParser = new NullMultipartRequestParser

  /**
   * Maps view names to view instances.
   * 
   * <p>The default resolver is a <code>ScalateViewResolver</code> configured using the
   * default values. The <code>ScalateViewResolver</code> also makes available the
   * {@link #viewHelpers} object as a attribute to all {@code View} instances using the
   * name "c".</p>
   * 
   * @see ScalateViewResolver
   * @see ScalateConfig
   */
  var viewResolver: ViewResolver = new ScalateViewResolver(servletContext)
}
